#include <stdio.h>

int debug = 0 ;

int _dico(int tab[], int borne_inf, int borne_sup, int val) {
    int mid ;

    if(debug)
        putchar('\n') ;
    while(borne_sup-borne_inf > 1) {
        mid = (borne_sup + borne_inf) / 2 ;
        if(debug)
            printf("mid = %d\t", mid) ;
        if( tab[mid] == val)
            return mid ;

        if(val < tab[mid])
            borne_sup = mid ;
        else
            borne_inf = mid ;
    }
    return -1 ;
}

int _dico_recursif(int tab[], int borne_inf, int borne_sup, int val){
    int mid ;

    mid = (borne_sup + borne_inf) / 2 ;
    if( tab[mid] == val)
        return mid ;

    if(val < tab[mid])
        borne_sup = mid ;
    else
        borne_inf = mid ;

    if(borne_sup-borne_inf > 1)
        return _dico_recursif(tab, borne_inf, borne_sup, val) ;
    else
        return -1 ;
}

int recherche_dico(int tab[], int borne_inf, int borne_sup, int val) {
    // on réduit la borne inf et on augmente la borne sup pour atteindre les extrêmités
    return _dico(tab, borne_inf-1, borne_sup+1, val) ;
//    return _dico_recursif(tab, borne_inf-1, borne_sup+1, val) ;
}

void affiche_tableau(int tab[], int borne_inf, int borne_sup){

    for( ; borne_inf < borne_sup ; borne_inf++ ){
        printf("%d\t", tab[borne_inf]) ;
    }
    putchar('\n') ;
}

void tri_bulle(int tab[], int size)
{
    int i , j ;
    int temp ;
    for(i = 0 ; i < size-1 ; i++) {
        if(debug)
            puts("-------------\n") ;
        for( j = 0 ; j < size - i ; j++) {
            if( tab[j] > tab[j+1] ) {
                // swap les 2
                temp = tab[j] ;
                tab[j] = tab[j+1] ;
                tab[j+1] = temp ;
                if(debug)
                    affiche_tableau(tab, 0, size) ;
            }
        }
    }
}


int main() {

    int array2[] = { 12, 27, -5, 0, 10, -2, 121, 0 } ;
    int size, size_s, i ;

    size = sizeof(array2) / sizeof(int) ;
    affiche_tableau(array2, 0, size) ;
    tri_bulle(array2, size) ;
    affiche_tableau(array2, 0, size) ;

    int search[] = { 55, 10, array2[0], array2[7]};
    size_s = sizeof(search)/sizeof(int) ;
    for(i = 0 ; i < size_s ; i++)
        printf("%d in array2 on pos,%d\n", search[i], recherche_dico(array2, 0, 8, search[i])) ;
    return 0;
}

